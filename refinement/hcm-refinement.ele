module hcm_refinement

open hcm

fact {
	infinite_model
}

----------------------------------------

-- Add machinery necessary for refinement.
var sig Test, Send, Recv in Joint {}


-- Every joint will be in exactly one of the 
-- three program counter states
fact {
	Test + Send + Recv = Joint
	disj[Test, Send, Recv]
}

----------------------------------------

pred init_R {
	init
	all u: Joint | u in Test
}

pred step_R {
	some u: Joint | process[u]
}

pred traces_R {
	init_R
	always step_R
}

pred process [u: Joint] {
	test[u] or
	leave_send[u] or
	leave_receive[u] or
	one v: Joint | synch[u, v]
}

pred test [u: Joint] {
	enter_send[u] or enter_receive[u]
}

pred enter_send [u: Joint] {

	u in Test
	u not in fixed
	u not in balanced

	Test' = Test - u
	Send' = Send + u
	Recv' = Recv

	balanced' = balanced + u
	pending' = pending + u <: neighbors

}

pred leave_send [u: Joint] {

	u in Send
	no v: Joint {
		u->v in pending
	}

	Send' = Send - u
	Test' = Test + u
	Recv' = Recv

	balanced' = balanced
	pending' = pending

}

pred enter_receive [u: Joint] {

	u in Test
	some x: Joint {
		x in Send
		x->u in pending
	}

	Test' = Test - u
	Recv' = Recv + u
	Send' = Send

	balanced' = balanced
	pending' = pending

}

pred leave_receive [u: Joint] {

	u in Recv
	no x: Joint {
		x->u in pending
	}

	Recv' = Recv - u
	Test' = Test + u
	Send' = Send

	balanced' = balanced
	pending' = pending

}

pred synch [u, v: Joint] {

	u->v in pending
	u in Send
	v in Recv

	Send' = Send
	Recv' = Recv
	Test' = Test

	balanced' = balanced - v
	pending' = pending - u->v

}

----------------------------------------

pred show {
	traces_R
}

run show for 3 Joint, 20 Time

----------------------------------------

-- Fails because step_R => step says nothing
-- about the initial state (i.e. the state at
-- time 0). This allows the model to begin
-- in an unreachable state.
assert refines {
	init_R => init
	step_R => step
}

check refines for 3 Joint, 3 Time

----------------------------------------

-- a process cannot be in test and have moments
-- to carry over
pred unreachable {
	some u: Joint | u in Test and some v: Joint | u->v in pending
}

-- Fixes the refines assertion by disallowing
-- unreachable states when checking if step_R
-- is a refinement
assert refines2 {
	init_R => init
	(not unreachable and step_R) => step
}

check refines2 for 10 Joint, 3 Time

----------------------------------------

-- Show that all traces generated by this model
-- (i.e. begin at init_R and progress according
-- to step_R) are a refinement of the hcm model.
assert refines3 {
	traces_R => traces
}

check refines3 for 3 Joint, 3 Time
