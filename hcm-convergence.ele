module hcm

open util/graph [Joint]

sig Joint {
	neighbors: some Joint,
	var pending: set Joint
}

sig fixed in Joint {}
var sig balanced in Joint {}

fact topology {
	noSelfLoops[neighbors]
	undirected[neighbors]
	stronglyConnected[neighbors]
}

fact pending_in_neighbors {
	always all u: Joint {
		u.pending in u.neighbors
	}
}

----------------------------------------

pred init {
	no balanced
	no pending
}

pred step {
	stutter
	or (some u: Joint | release_and_distribute[u])
	or (some u, v: Joint | carryover[u, v])
}

pred stutter {
	pending' = pending
	balanced' = balanced
}

pred release_and_distribute [u: Joint] {
	
	-- u is not fixed or balanced
	u not in fixed
	u not in balanced

	-- there are no pending carryovers away from u
	no u.pending

	-- only u may change balanced state, and it becomes balanced
	balanced' = balanced + u

	-- only carryovers originating at u may change pending state,
	-- and they all acquire a pending moment carryover
	pending' = pending + u <: neighbors

}

pred carryover [u, v: Joint] {

	-- there is a pending moment carryover from u to v
	u->v in pending

	-- in the next state there is no longer a pending carryover
	-- from u to v, and all other pending states remain the same
	pending' = pending - u->v

	-- only v may change balanced state, all others remain unchanged
	(balanced' = balanced + v or balanced' = balanced - v)

}

----------------------------------------

-- enforce at least two adjacent non-fixed joints, at least one of
-- which is not balanced
fact iterable_topologies {
	some u, v: Joint {
		u->v in neighbors
		u not in fixed
		v not in fixed
		(u not in balanced or v not in balanced)
	}
}

fact traces {
	init
	always step
}

----------------------------------------

pred can_release_and_distribute {
	some u: Joint {
		u not in fixed
		u not in balanced
		no u.pending
	}
}

pred can_carry {
	some u, v: Joint {
		u->v in pending
	}
}

pred fairness {

	-- if a release and balance is possible, it will
	-- eventually happen
	always {
		can_release_and_distribute => eventually { 
			some u: Joint | release_and_distribute[u] 
		}
	}

	-- if a carryover is possible, it will eventually
	-- happen
	always {
		can_carry => eventually { 
			some u, v: Joint | carryover[u, v] 
		}
	}

}

pred carryovers_converge {
	
	-- eventually, for all possible carryovers, the carryover
	-- does not cause the receiving joint to become unbalanced
	eventually {
		all u, v: Joint {
			always (carryover[u, v] => balanced' = balanced + v)
		}
	}

}

pred model_converged {

	-- there are no pending moment carryovers
	no pending

	-- all non-fixed joints are balanced
	all u: Joint | u not in fixed => u in balanced

}


--
-- check that the model will converge
--

assert convergence {
	(fairness and carryovers_converge) => eventually model_converged
}

check convergence for 6


--
-- show a converging model
--

pred show {
	fairness and carryovers_converge
}

run show for 3


--
-- show a model in which every joint goes from balanced
-- to unbalanced at some point
--

pred show_iteration {
	fairness
	carryovers_converge
	all u: Joint {
		eventually { u in balanced and u not in balanced' }
	}
}

run show_iteration for 3 but exactly 2 Joint
run show_iteration for 3 but exactly 3 Joint, exactly 13 Time
run show_iteration for 3 but exactly 4 Joint, exactly 17 Time









