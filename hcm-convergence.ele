module hcm

open util/graph [Joint]

sig Joint {
	neighbors: some Joint,
	var pending: set Joint
}

sig fixed in Joint {}
var sig balanced in Joint {}
var sig converged in Joint {}

fact topology {
	noSelfLoops[neighbors]
	undirected[neighbors]
	stronglyConnected[neighbors]
}

fact pending_in_neighbors {
	always all u: Joint {
		u.pending in u.neighbors
	}
}

fact converged_must_be_balanced {
	always all u: Joint {
		u in converged => u in balanced
	}
}

----------------------------------------

pred init {
	no converged
	all u: Joint | no u.pending
}

pred step {
	stutter
	or (some u: Joint | release_and_distribute[u])
	or (some u, v: Joint | carryover[u, v])
}

pred stutter {

	pending' = pending
	balanced' = balanced
	converged' = converged

}

pred release_and_distribute [u: Joint] {

	u not in fixed
	u not in balanced
	no u.pending

	balanced' = balanced + u
	pending' = pending + u <: neighbors
	converged' = converged

}

pred carryover [u, v: Joint] {

	u->v in pending

	pending' = pending - u->v

	(balanced' = balanced + v or balanced' = balanced - v)
	(converged' = converged + v or converged' = converged - v)

}

----------------------------------------

fact iterable_topologies {
	some u, v: Joint {
		u->v in neighbors
		u not in fixed
		v not in fixed
		(u not in balanced or v not in balanced)
	}
}

fact traces {
	init
	always step
}

----------------------------------------

pred can_release_and_distribute {
	some u: Joint {
		u not in fixed
		u not in balanced
		no u.pending
	}
}

pred can_carry {
	some u, v: Joint {
		u->v in pending
	}
}

pred fairness {
	
	always {
		can_release_and_distribute => eventually { 
			some u: Joint | release_and_distribute[u] 
		}
	}

	always {
		can_carry => eventually { 
			some u, v: Joint | carryover[u, v] 
		}
	}

	always {
		not model_converged => eventually {
			not stutter
		}
	}

}

pred vertices_converge {
	eventually { 
		all u, v: Joint { 
			always (carryover[u, v] => converged' = converged + v)
		}
	}
}

pred model_converged {
	no u: Joint {
		u not in fixed
		u not in balanced
	}
	no u, v: Joint {
		u->v in pending
	}
	converged = Joint
}

assert convergence {
	(fairness and vertices_converge) => eventually model_converged
}

check convergence for 6

pred show {
	fairness and vertices_converge
}

run show for 3 but exactly 2 Joint, exactly 10 Time

