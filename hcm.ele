module hcm

open util/graph [Joint]

sig Joint {
	neighbors: some Joint,
	var pending: set neighbors
}

sig fixed in Joint {}
var sig balanced in Joint {}

fact topology {
	noSelfLoops[neighbors]
	undirected[neighbors]
	stronglyConnected[neighbors]
}

check pending_in_neighbors {
	always all u: Joint {
		u.pending in u.neighbors
	}
}

----------------------------------------

pred init {
	all u: Joint | no u.pending
}

pred step {
	(some u: Joint | release_and_distribute[u])
	or (some u, v: Joint | carryover[u, v])
}

pred release_and_distribute [u: Joint] {

	u not in fixed
	u not in balanced
	no u.pending

	balanced' = balanced + u
	pending' = pending + u <: neighbors

}

pred carryover [u, v: Joint] {

	u->v in pending

	pending' = pending - u->v
	balanced' = balanced - v

}

----------------------------------------

pred show {
	init
	always step
}

run show for 3 but exactly 3 Joint, 10 Time
